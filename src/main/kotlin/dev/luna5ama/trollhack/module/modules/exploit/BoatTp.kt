package dev.luna5ama.trollhack.module.modules.exploit

import dev.fastmc.common.TickTimer
import dev.luna5ama.trollhack.event.events.TickEvent
import dev.luna5ama.trollhack.event.safeParallelListener
import dev.luna5ama.trollhack.gui.hudgui.elements.client.Notification
import dev.luna5ama.trollhack.manager.managers.TimerManager.resetTimer
import dev.luna5ama.trollhack.module.Category
import dev.luna5ama.trollhack.module.Module
import net.minecraft.entity.item.EntityBoat
import net.minecraft.network.play.client.CPacketVehicleMove

internal object BoatTp : Module(
    name = "Boat Tp",
    description = "Teleport or kill when in a boat",
    category = Category.EXPLOIT,
) {
    private val loop by setting("Loop", 4, 1..20, 1)
    private val ytp by setting("Y Packet", true)
    private val y by setting("Y1", -0.05f, -6.0f..6.0f, 0.05f, ::ytp)
    private val y2 by setting("Y2", 3f, -400f..400f, 10f, ::ytp)
    private val xtp by setting("X Packet", true)
    private val x by setting("X1", 3f, -400f..400f, 10f, ::xtp)
    private val ztp by setting("Z Packet", true)
    private val z by setting("Z1", 3f, -400f..400f, 10f, ::ztp)
    private val notification by setting("Notification", true)

    private val retryTimer = TickTimer()
    private const val TimeoutSeconds = 1.0f

    init {
        onEnable {
            retryTimer.reset()
        }

        onDisable {
            resetTimer()
            if (notification) Notification.send(BoatTp, "Successfully Sent Packet", 1000L)
        }

        safeParallelListener<TickEvent.Post> {
            if (retryTimer.tickAndReset((TimeoutSeconds * 1000.0f).toLong())) {
                val player = mc.player
                if (player != null && player.ridingEntity is EntityBoat) {
                    performPackets()
                    disable()
                }
            }
        }
    }

    private fun performPackets() {
        val loopCountMax = loop
        val player = mc.player
        val boat = player?.ridingEntity as? EntityBoat ?: return

        for (loopCount in 0 until loopCountMax) {
            if (ytp || xtp || ztp) {
                val originalPos = boat.positionVector

                if (ytp) {
                    boat.setPosition(boat.posX, boat.posY + y, boat.posZ)
                    val groundPacket = CPacketVehicleMove(boat)
                    boat.setPosition(boat.posX, boat.posY + y2, boat.posZ)
                    val skyPacket = CPacketVehicleMove(boat)
                    for (i in 0..99) {
                        mc.player.connection.sendPacket(skyPacket)
                        mc.player.connection.sendPacket(groundPacket)
                        mc.player.connection.sendPacket(CPacketVehicleMove(boat))
                    }
                    boat.setPosition(originalPos.x, originalPos.y, originalPos.z)
                }

                if (xtp) {
                    boat.setPosition(boat.posX + x, boat.posY, boat.posZ)
                    val groundPacket = CPacketVehicleMove(boat)
                    boat.setPosition(originalPos.x, originalPos.y, originalPos.z)
                    for (i in 0..99) {
                        mc.player.connection.sendPacket(groundPacket)
                        mc.player.connection.sendPacket(CPacketVehicleMove(boat))
                    }
                }

                if (ztp) {
                    boat.setPosition(boat.posX, boat.posY, boat.posZ + z)
                    val groundPacket = CPacketVehicleMove(boat)
                    boat.setPosition(originalPos.x, originalPos.y, originalPos.z)
                    for (i in 0..99) {
                        mc.player.connection.sendPacket(groundPacket)
                    }
                    mc.player.connection.sendPacket(CPacketVehicleMove(boat))
                }
            }
        }
    }
}